type CanisterLogFeature = variant {
  filterMessageByContains;
  filterMessageByRegex;
};
type CanisterLogMessages = record {
  data : vec LogMessageData;
  lastAnalyzedMessageTimeNanos : opt nat64;
};
type CanisterLogMessagesInfo = record {
  features : vec opt CanisterLogFeature;
  lastTimeNanos : opt nat64;
  count : nat32;
  firstTimeNanos : opt nat64;
};
type CanisterLogRequest = variant {
  getMessagesInfo;
  getMessages : GetLogMessagesParameters;
  getLatestMessages : GetLatestLogMessagesParameters;
};
type CanisterLogResponse = variant {
  messagesInfo : CanisterLogMessagesInfo;
  messages : CanisterLogMessages;
};
type CanisterMetrics = record { data : CanisterMetricsData };
type CanisterMetricsData = variant {
  hourly : vec HourlyMetricsData;
  daily : vec DailyMetricsData;
};
type CollectMetricsRequestType = variant { force; normal };
type DailyMetricsData = record {
  updateCalls : nat64;
  canisterHeapMemorySize : NumericEntity;
  canisterCycles : NumericEntity;
  canisterMemorySize : NumericEntity;
  timeMillis : int;
};
type EndWasmUploadArgs = record { wasm_hash : text };
type EndWasmUploadError = variant { WrongState; WrongHash };
type EndWasmUploadResponse = variant { Ok; Err : EndWasmUploadError };
type GetGeekUserPrincipalsResponse = variant {
  Ok : GetGeekUserPrincipalsResult;
};
type GetGeekUserPrincipalsResult = record {
  geek_user_principals : vec principal;
};
type GetInformationRequest = record {
  status : opt StatusRequest;
  metrics : opt MetricsRequest;
  logs : opt CanisterLogRequest;
  version : bool;
};
type GetInformationResponse = record {
  status : opt StatusResponse;
  metrics : opt MetricsResponse;
  logs : opt CanisterLogResponse;
  version : opt nat;
};
type GetLatestLogMessagesParameters = record {
  upToTimeNanos : opt nat64;
  count : nat32;
  filter : opt GetLogMessagesFilter;
};
type GetLogMessagesFilter = record {
  analyzeCount : nat32;
  messageRegex : opt text;
  messageContains : opt text;
};
type GetLogMessagesParameters = record {
  count : nat32;
  filter : opt GetLogMessagesFilter;
  fromTimeNanos : opt nat64;
};
type GetMetricsParameters = record {
  dateToMillis : nat;
  granularity : MetricsGranularity;
  dateFromMillis : nat;
};
type GetServicePrincipalsResponse = variant { Ok : GetServicePrincipalsResult };
type GetServicePrincipalsResult = record { service_principals : vec principal };
type GetUploadedWasmError = variant { WrongState };
type GetUploadedWasmResponse = variant {
  Ok : GetUploadedWasmResult;
  Err : GetUploadedWasmError;
};
type GetUploadedWasmResult = record { len : nat64; wasm_hash : text };
type HourlyMetricsData = record {
  updateCalls : vec nat64;
  canisterHeapMemorySize : vec nat64;
  canisterCycles : vec nat64;
  canisterMemorySize : vec nat64;
  timeMillis : int;
};
type InstallWasmArgs = record {
  arg : vec nat8;
  canister_id : principal;
  wasm_hash : text;
};
type InstallWasmError = variant {
  WrongState;
  InstallError : record { reason : text };
  WrongHash;
};
type InstallWasmResponse = variant { Ok; Err : InstallWasmError };
type LogMessageData = record { timeNanos : nat64; message : text };
type MetricsGranularity = variant { hourly; daily };
type MetricsRequest = record { parameters : GetMetricsParameters };
type MetricsResponse = record { metrics : opt CanisterMetrics };
type NumericEntity = record {
  avg : nat64;
  max : nat64;
  min : nat64;
  first : nat64;
  last : nat64;
};
type PutWasmChunkArgs = record { chunk : vec nat8 };
type PutWasmChunkError = variant { WrongState };
type PutWasmChunkResponse = variant { Ok; Err : PutWasmChunkError };
type SetGeekUserPrincipalResponse = variant { Ok };
type SetGeekUserPrincipalsArgs = record {
  geek_user_principals : vec principal;
};
type SetServicePrincipalError = variant { Inconsistency };
type SetServicePrincipalResponse = variant {
  Ok;
  Err : SetServicePrincipalError;
};
type SetServicePrincipalsArgs = record { service_principals : vec principal };
type StartWasmUploadResponse = variant { Ok };
type StatusRequest = record {
  memory_size : bool;
  cycles : bool;
  heap_memory_size : bool;
};
type StatusResponse = record {
  memory_size : opt nat64;
  cycles : opt nat64;
  heap_memory_size : opt nat64;
};
type UpdateInformationRequest = record {
  metrics : opt CollectMetricsRequestType;
};
type UpgradeWasmError = variant {
  WrongState;
  WrongHash;
  UpgradeError : record { reason : text };
};
type UpgradeWasmResponse = variant { Ok; Err : UpgradeWasmError };
service : {
  end_wasm_uploading : (EndWasmUploadArgs) -> (EndWasmUploadResponse);
  getCanistergeekInformation : (GetInformationRequest) -> (
  opt GetInformationResponse,
  ) query;
  get_geek_user_principals : (record {}) -> (
  GetGeekUserPrincipalsResponse,
  ) query;
  get_service_principals : (record {}) -> (GetServicePrincipalsResponse) query;
  get_uploaded_wasm : (record {}) -> (GetUploadedWasmResponse) query;
  install_wasm : (InstallWasmArgs) -> (InstallWasmResponse);
  put_wasm_chunk : (PutWasmChunkArgs) -> (PutWasmChunkResponse);
  set_geek_user_principals : (SetGeekUserPrincipalsArgs) -> (
  SetGeekUserPrincipalResponse,
  );
  set_service_principals : (SetServicePrincipalsArgs) -> (
  SetServicePrincipalResponse,
  );
  start_wasm_uploading : (record {}) -> (StartWasmUploadResponse);
  updateCanistergeekInformation : (UpdateInformationRequest) -> ();
  upgrade_wasm : (InstallWasmArgs) -> (UpgradeWasmResponse);
}